// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  email                 String    @unique
  password              String
  passwordChangedAt     DateTime?
  passwordResetToken    String?
  passwordTokenExpireAt DateTime?
  createdAt             DateTime  @default(now())
  lastLoggedin          DateTime  @default(now())
  profile               Profile?
}

model Profile {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  title               String?
  about               String?
  image               String?
  profileViews        Int?      @default(0)
  isUserLive          Boolean
  status              Boolean
  followedBy          Profile[] @relation("Profilefollows", fields: [followedByIds], references: [id])
  followedByIds       String[]  @db.ObjectId
  following           Profile[] @relation("Profilefollows", fields: [followingIds], references: [id])
  followingIds        String[]  @db.ObjectId
  user                User      @relation(fields: [userId], references: [id])
  userId              String    @unique @db.ObjectId
  moderatorOf         Forum[]   @relation("ForumModerator")
  adminOf             Forum[]   @relation("ForumAdmin")
  topics              Topic[]
  roles               Role[]    @relation(fields: [roleId], references: [id])
  roleId              String[]  @db.ObjectId
  subscribedForums    Forum[]   @relation("ForumFollower", fields: [subscribedForumsIds], references: [id])
  subscribedForumsIds String[]  @db.ObjectId
  likes               Like[]
  posts               Post[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
  topic     Topic?   @relation(fields: [topicId], references: [id])
  topicId   String?  @db.ObjectId
}

model Role {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  description String
  profiles    Profile[] @relation(fields: [profileId], references: [id])
  profileId   String[]  @db.ObjectId
}

model Folder {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      Boolean
  position    Int
  forums      Forum[]
  slug        String  @unique
}

model Forum {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  status        Boolean
  position      Int
  moderator     Profile?        @relation("ForumModerator", fields: [moderatorId], references: [id])
  moderatorId   String?         @db.ObjectId
  createdBy     Profile?        @relation("ForumAdmin", fields: [createdById], references: [id])
  createdById   String?         @db.ObjectId
  parent        Folder          @relation(fields: [folderId], references: [id])
  folderId      String          @db.ObjectId
  permissions   ForumPermission @relation(fields: [permissionId], references: [id])
  permissionId  String          @unique @db.ObjectId
  topics        Topic[]
  subscribers   Profile[]       @relation("ForumFollower", fields: [subscribersId], references: [id])
  subscribersId String[]        @db.ObjectId
  slug          String          @unique
}

model Topic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  forum     Forum    @relation(fields: [forumId], references: [id])
  forumId   String   @db.ObjectId
  status    Boolean
  islock    Boolean
  user      Profile  @relation(fields: [profileId], references: [id])
  profileId String   @db.ObjectId
  tags      Tag[]    @relation(fields: [tagsId], references: [id])
  tagsId    String[] @db.ObjectId
  file      String?
  likes     Like[]
  slug      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  views     Int?
}

model Tag {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String   @unique
  topics   Topic[]  @relation(fields: [topicIds], references: [id])
  topicIds String[] @db.ObjectId
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  user      Profile  @relation(fields: [profileId], references: [id])
  profileId String   @db.ObjectId
  likes     Like[]
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String   @db.ObjectId
  replies   Post[]   @relation(name: "PostReplies")
  replyIds  String[] @db.ObjectId
  post      Post?    @relation("PostReplies", fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    String?  @db.ObjectId
}

model ForumPermission {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  viewContentGuest   Boolean?
  viewContentUser    Boolean?
  createTopic        Boolean?
  uploadFiles        Boolean?
  autoApproveTopic   Boolean?
  editTopic          Boolean?
  deleteTopic        Boolean?
  commentOnOpenTopic Boolean?
  autoApproveComment Boolean?
  editComment        Boolean?
  deleteComment      Boolean?
  forum              Forum?
}
