// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  email                 String    @unique
  password              String
  passwordChangedAt     DateTime?
  passwordResetToken    String?
  passwordTokenExpireAt DateTime?
  createdAt             DateTime  @default(now())
  lastLoggedin          DateTime  @default(now())
  profile               Profile?
}

model Profile {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  title         String?
  about         String?
  image         String?
  profileViews  Int?      @default(0)
  likes         Int?      @default(0)
  isUserLive    Boolean
  status        Boolean
  followedBy    Profile[] @relation("Profilefollows", fields: [followedByIds], references: [id])
  followedByIds String[]  @db.ObjectId
  following     Profile[] @relation("Profilefollows", fields: [followingIds], references: [id])
  followingIds  String[]  @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique @db.ObjectId
  moderatorOf   Forum[]   @relation("ForumModerator")
  adminOf       Forum[]   @relation("ForumAdmin")
  topics        Topic[]
  role          Role[]    @relation(fields: [roleId], references: [id])
  roleId        String[]  @db.ObjectId
}

model Role {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  description String
  profile     Profile[] @relation(fields: [profileId], references: [id])
  profileId   String[]  @db.ObjectId
}

model Folder {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      Boolean
  position    Int
  forums      Forum[]
}

model Forum {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      Boolean
  position    Int
  moderator   Profile?           @relation("ForumModerator", fields: [moderatorId], references: [id])
  moderatorId String?            @db.ObjectId
  createdBy   Profile?           @relation("ForumAdmin", fields: [createdById], references: [id])
  createdById String?            @db.ObjectId
  parent      Folder             @relation(fields: [folderId], references: [id])
  folderId    String             @db.ObjectId
  permissions ForumPermissions[] @default([VIEW_PUBLIC_CONTENTS])
  topics      Topic[]
}

model Topic {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  forum       Forum?   @relation(fields: [forumId], references: [id])
  forumId     String?  @db.ObjectId
  slug        String
  status      String
  islock      Boolean
  user        Profile  @relation(fields: [profileId], references: [id])
  profileId   String   @db.ObjectId
  tags        Tag[]    @relation(fields: [tagsId], references: [id])
  tagsId      String[] @db.ObjectId
  file        String
}

model Tag {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  topic    Topic[]  @relation(fields: [topicIds], references: [id])
  topicIds String[] @db.ObjectId
}

enum ForumPermissions {
  VIEW_PUBLIC_CONTENTS
  VIEW_HIDDEN_TOPICS
  CREATE_NEW_TOPICS
  UPLOAD_FILES
  APPROVE_NEW_TOPICS
  EDIT_OWN_TOPICS
  EDIT_ANY_TOPICS
  DELETE_OWN_TOPICS
  DELETE_ANY_TOPICS
  COMMENT_ON_OPEN_TOPICS
  COMMENT_ON_LOCKED_TOPICS
  APPROVE_NEW_COMMENTS
  EDIT_OWN_COMMENTS
  EDIT_ANY_COMMENTS
  DELETE_OWN_COMMENTS
  DELETE_ANY_COMMENTS
}
